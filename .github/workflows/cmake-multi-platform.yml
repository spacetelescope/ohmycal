name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [RelWithDebInfo]
        c_compiler: [gcc, clang]
        c_win_sys: [mingw64]
        include:
          - os: macos-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang
        exclude:
          - os: linux-latest
            c_win_sys: mingw64
          - os: macos-latest
            c_win_sys: mingw64
            c_compiler: gcc
          - os: windows-latest
            c_win_sys: mingw64
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: >
        sudo apt install -y libcurl4-openssl-dev libxml2-dev rsync

    - name: 'Install dependencies (Windows)'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.c_win_sys}}
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p
          libxml2:x
      if: matrix.os == 'windows-latest'

    - name: Configure CMake (Windows)
      shell: msys2 {0}
      run: >
        cmake -B "${{ steps.strings.outputs.build-output-dir }}"
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S "${{ github.workspace }}"
      if: runner.os == 'Windows'

    - name: Build (Windows)
      shell: msys2 {0}
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}
      if: runner.os == 'Windows'

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
      if: runner.os != 'Windows'

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      if: runner.os != 'Windows'

    # TODO: Write ctests
    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #  run: ctest --build-config ${{ matrix.build_type }}
